
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000816  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000069d  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  00001103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000214  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define BUTTON_STATE() (PIND&(1<<PIND0))

int main(void)
{
	// 1 -> Salida|| 0 -> Entrada
	DDRB = 0xFF;   // Config como salida desde B0 a B7
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRD =  0b11111110; //Config como entrada el puerto D0
  84:	8e ef       	ldi	r24, 0xFE	; 254
  86:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00; // Inicio con todo apagado
  88:	15 b8       	out	0x05, r1	; 5
	int ESTADO = 0;
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
	while (1) //Bucle infinito
	{
		if (ESTADO == 0) // Inicio con el estado en 0.
  8e:	41 15       	cp	r20, r1
  90:	51 05       	cpc	r21, r1
  92:	09 f0       	breq	.+2      	; 0x96 <main+0x16>
  94:	65 c0       	rjmp	.+202    	; 0x160 <main+0xe0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f e3       	ldi	r18, 0x3F	; 63
  98:	32 e4       	ldi	r19, 0x42	; 66
  9a:	6f e0       	ldi	r22, 0x0F	; 15
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
  a8:	32 c0       	rjmp	.+100    	; 0x10e <main+0x8e>
			_delay_ms(250); //retardo 250 ms
			while (ESTADO == 0) // Esperamos mientras el pulsador este presionado
				{
				for (int j=0; j<=3; j++) // Primera secuencia
					{
					PORTB = (1<<j) | (1<<(7-j)); // Enciende los leds 7&0--6&1--5&2--4&3
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	02 2e       	mov	r0, r18
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <main+0x38>
  b4:	ee 0f       	add	r30, r30
  b6:	ff 1f       	adc	r31, r31
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <main+0x34>
  bc:	67 e0       	ldi	r22, 0x07	; 7
  be:	70 e0       	ldi	r23, 0x00	; 0
  c0:	62 1b       	sub	r22, r18
  c2:	73 0b       	sbc	r23, r19
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x4a>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x46>
  ce:	8e 2b       	or	r24, r30
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	92 e4       	ldi	r25, 0x42	; 66
  d6:	6f e0       	ldi	r22, 0x0F	; 15
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	60 40       	sbci	r22, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x58>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x62>
  e2:	00 00       	nop
					_delay_ms(250); //retardo 250 ms
					if (BUTTON_STATE()!=1) // Si el pulsador fue presionado cambio el estado a 1
  e4:	48 99       	sbic	0x09, 0	; 9
  e6:	0b c0       	rjmp	.+22     	; 0xfe <main+0x7e>
  e8:	8f e3       	ldi	r24, 0x3F	; 63
  ea:	92 e4       	ldi	r25, 0x42	; 66
  ec:	4f e0       	ldi	r20, 0x0F	; 15
  ee:	81 50       	subi	r24, 0x01	; 1
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	40 40       	sbci	r20, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x78>
  f8:	00 00       	nop
						{
							_delay_ms(250); //retardo 250 ms
							ESTADO = 1; // Cambio de estado.
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
		if (ESTADO == 0) // Inicio con el estado en 0.
		{
			_delay_ms(250); //retardo 250 ms
			while (ESTADO == 0) // Esperamos mientras el pulsador este presionado
				{
				for (int j=0; j<=3; j++) // Primera secuencia
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x88>
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	24 30       	cpi	r18, 0x04	; 4
 10a:	31 05       	cpc	r19, r1
 10c:	74 f2       	brlt	.-100    	; 0xaa <main+0x2a>
	while (1) //Bucle infinito
	{
		if (ESTADO == 0) // Inicio con el estado en 0.
		{
			_delay_ms(250); //retardo 250 ms
			while (ESTADO == 0) // Esperamos mientras el pulsador este presionado
 10e:	41 15       	cp	r20, r1
 110:	51 05       	cpc	r21, r1
 112:	c1 f3       	breq	.-16     	; 0x104 <main+0x84>
 114:	bc cf       	rjmp	.-136    	; 0x8e <main+0xe>
		} else {
				while (ESTADO == 1)
					{
					for (int i=7; i>=0; i--) // Segunda secuencia 
					{
						PORTB = (1<<i); // Enciende desde el led 7 al 0.
 116:	21 e0       	ldi	r18, 0x01	; 1
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	08 2e       	mov	r0, r24
 11c:	02 c0       	rjmp	.+4      	; 0x122 <main+0xa2>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	0a 94       	dec	r0
 124:	e2 f7       	brpl	.-8      	; 0x11e <main+0x9e>
 126:	25 b9       	out	0x05, r18	; 5
 128:	6f e3       	ldi	r22, 0x3F	; 63
 12a:	22 e4       	ldi	r18, 0x42	; 66
 12c:	3f e0       	ldi	r19, 0x0F	; 15
 12e:	61 50       	subi	r22, 0x01	; 1
 130:	20 40       	sbci	r18, 0x00	; 0
 132:	30 40       	sbci	r19, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0xae>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0xb8>
 138:	00 00       	nop
						_delay_ms(250); //retardo 250 ms
						if (BUTTON_STATE()!=1) // Si el pulsador fue presionado cambio el estado a 0
 13a:	48 99       	sbic	0x09, 0	; 9
 13c:	0b c0       	rjmp	.+22     	; 0x154 <main+0xd4>
 13e:	4f e3       	ldi	r20, 0x3F	; 63
 140:	62 e4       	ldi	r22, 0x42	; 66
 142:	2f e0       	ldi	r18, 0x0F	; 15
 144:	41 50       	subi	r20, 0x01	; 1
 146:	60 40       	sbci	r22, 0x00	; 0
 148:	20 40       	sbci	r18, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xc4>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xce>
 14e:	00 00       	nop
							{
								_delay_ms(250); //retardo 250 ms
								ESTADO = 0; // Cambio de estado.
 150:	40 e0       	ldi	r20, 0x00	; 0
 152:	50 e0       	ldi	r21, 0x00	; 0
					}
				}
		} else {
				while (ESTADO == 1)
					{
					for (int i=7; i>=0; i--) // Segunda secuencia 
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0xdc>
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	99 23       	and	r25, r25
 15e:	dc f6       	brge	.-74     	; 0x116 <main+0x96>
						}
					//PORTB = 0b00000000; 
					}
				}
		} else {
				while (ESTADO == 1)
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	51 05       	cpc	r21, r1
 164:	c9 f3       	breq	.-14     	; 0x158 <main+0xd8>
 166:	93 cf       	rjmp	.-218    	; 0x8e <main+0xe>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
